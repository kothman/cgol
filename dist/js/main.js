// @todo Write unit tests
var Canvas = (function () {
    function Canvas(selector) {
        this.canvas = document.querySelector(selector);
        Canvas.lastResize = Date.now();
        this.ctx = this.canvas.getContext("2d");
        console.log("Initializing canvas");
        this.setCanvasDimensions();
        this.applyResizeListener();
    }
    /**
     * Apply resize listener on the window & update canvas dimensions on resize
     */
    Canvas.prototype.applyResizeListener = function () {
        window.addEventListener('resize', function (e) {
            if (Canvas.canResize()) {
                this.setCanvasDimensions();
            }
        }.bind(this));
    };
    Canvas.prototype.setCanvasDimensions = function () {
        var canvasDimensions = this.canvas.parentElement.getBoundingClientRect();
        this.setWidth(canvasDimensions.width);
        this.setHeight(canvasDimensions.height);
    };
    Canvas.prototype.setWidth = function (w) {
        this.width = w - (w % Cell.size);
        this.canvas.setAttribute("width", this.getWidth().toString());
        this.canvas.style.width = this.getWidth().toString();
    };
    Canvas.prototype.setHeight = function (h) {
        this.height = h - (h % Cell.size);
        this.canvas.setAttribute("height", this.getHeight().toString());
        this.canvas.style.height = this.getHeight().toString();
    };
    Canvas.prototype.getHeight = function () {
        return this.height;
    };
    Canvas.prototype.getWidth = function () {
        return this.width;
    };
    Canvas.prototype.getContext = function () {
        return this.ctx;
    };
    Canvas.prototype.getCanvas = function () {
        return this.canvas;
    };
    Canvas.canResize = function () {
        var now = Date.now();
        return now - 1000 >= Canvas.lastResize;
    };
    return Canvas;
}());
// @todo Write unit tests
var Cell = (function () {
    // @todo this should probably use a Point
    function Cell(x, y) {
        this.alive = false;
        this.x = x;
        this.y = y;
    }
    Cell.prototype.toggle = function () {
        this.alive = !this.alive;
    };
    Cell.prototype.kill = function () {
        this.alive = false;
    };
    Cell.prototype.regen = function () {
        this.alive = true;
    };
    Cell.prototype.isAlive = function () {
        return this.alive;
    };
    Cell.prototype.getX = function () {
        return Cell.getActualPosition(this.x);
    };
    Cell.prototype.getY = function () {
        return Cell.getActualPosition(this.y);
    };
    /**
     * Returns the actual position (x or y) based on the cell size
     */
    Cell.getActualPosition = function (i) {
        return (i * Cell.size);
    };
    Cell.getSize = function () {
        return Cell.size;
    };
    Cell.setSize = function (x) {
        Cell.size = 20 * x;
    };
    Cell.prototype.contains = function (x, y) {
        return (x >= this.x &&
            x <= Cell.getActualPosition(this.x) &&
            y >= this.y &&
            y <= Cell.getActualPosition(this.y));
    };
    /**
     * Take the mouse offset in the canvas element, mod Cell size, take that amount and trim it
     * from the mouse offset. Divide by cell size.
     */
    Cell.getCellCoordinates = function (p) {
        var x = Math.floor((p.x - (p.x % Cell.size)) / (Cell.size)), y = Math.floor((p.y - (p.y % Cell.size)) / (Cell.size));
        return new Point(x, y);
    };
    /**
     * Get Point of Cell
     */
    Cell.prototype.getPoint = function () {
        return new Point(this.x, this.y);
    };
    Cell.size = 200;
    return Cell;
}());
// @todo Write unit tests
var Life = (function () {
    function Life(c) {
        this.cells = null;
        this.oldCells = null;
        this.newCells = null;
        this.isPlaying = false;
        this.height = 400;
        this.width = 600;
        this.speed = 1;
        this.size = 1;
        this.canvas = c;
        this.canvas.setCanvasDimensions();
        this.assignToolbarElements();
        this.createCells();
        this.calculateNewCells();
        Cell.setSize(this.sizeRange.valueAsNumber);
        this.drawAllCells();
        this.addListeners();
    }
    Life.prototype.addListeners = function () {
        this.canvas.getCanvas().addEventListener('click', this.onClick.bind(this));
        window.addEventListener('resize', this.onResize.bind(this));
        this.playPauseButton.addEventListener('click', this.playPause.bind(this));
        this.stepButton.addEventListener('click', this.step.bind(this));
        this.resetButton.addEventListener('click', this.reset.bind(this));
        this.speedRange.addEventListener('change', this.onChangeSpeed.bind(this));
        this.sizeRange.addEventListener('change', this.onChangeSize.bind(this));
    };
    Life.prototype.assignToolbarElements = function () {
        this.playPauseButton = document.querySelector('.play-pause-button');
        this.stepButton = document.querySelector('.step-button');
        this.resetButton = document.querySelector('.reset-button');
        this.speedRange = document.querySelector('.speed-range');
        this.sizeRange = document.querySelector('.size-range');
    };
    Life.prototype.onClick = function (e) {
        var mouseClickPoint = new Point(e.offsetX, e.offsetY);
        var cellCoordinates = Cell.getCellCoordinates(mouseClickPoint);
        // toggle that cell
        var c = this.getCell(cellCoordinates);
        c.toggle();
        this.drawCell(c);
    };
    Life.prototype.onResize = function () {
        if (Canvas.canResize())
            this.drawAllCells();
    };
    Life.prototype.onChangeSpeed = function () {
        var wasPlaying = this.isPlaying;
        if (this.isPlaying)
            this.pause();
        this.speed = this.speedRange.valueAsNumber;
        if (wasPlaying)
            this.play();
    };
    Life.prototype.onChangeSize = function () {
        Cell.setSize(this.sizeRange.valueAsNumber);
        this.createCells();
        this.drawAllCells();
    };
    Life.prototype.createCells = function () {
        this.cells = [];
        for (var y = 0; y < this.height; y++) {
            this.cells.push([]);
            for (var x = 0; x < this.width; x++) {
                var c = new Cell(x, y);
                this.cells[y].push(c);
            }
        }
    };
    /**
     * Draw a given cell on the canvas
     */
    Life.prototype.drawCell = function (c) {
        if (this.cellOffScreen(c)) {
            c.kill();
            return;
        }
        var ctx = this.canvas.getContext();
        ctx.fillStyle = "black";
        ctx.strokeStyle = "black";
        ctx.fillRect(c.getX(), c.getY(), Cell.getSize(), Cell.getSize());
        if (!c.alive) {
            // Had some weird issues with using ctx.strokeRect,
            // seemed to create a larger rectangle than just ctx.fillRect
            ctx.clearRect(c.getX() + 1, c.getY() + 1, Cell.getSize() - 2, Cell.getSize() - 2);
        }
    };
    /**
     * Go through matrix and call this.drawCell on all cells
     */
    Life.prototype.drawAllCells = function () {
        for (var x = 0; x < this.width; x++) {
            for (var y = 0; y < this.height; y++) {
                this.drawCell(this.getCell(new Point(x, y)));
            }
        }
    };
    /**
     * Get a specific cell from the matrix, given a point
     */
    Life.prototype.getCell = function (p) {
        return this.cells[p.y][p.x];
    };
    /**
     * Check if the cell is off screen
     */
    Life.prototype.cellOffScreen = function (c) {
        return c.getX() + Cell.getSize() > this.canvas.getWidth() || c.getY() + Cell.getSize() > this.canvas.getHeight();
    };
    /**
     * Get matrix of all surrounding/adjacent cells
     */
    Life.prototype.getSurroundingCells = function (c) {
        var cells = [];
        // @todo Figure out a more elegant way to do this?
        if (c.x - 1 >= 0) {
            cells.push(this.getCell(new Point(c.x - 1, c.y)));
        }
        if (c.x - 1 >= 0 && c.y - 1 >= 0) {
            cells.push(this.getCell(new Point(c.x - 1, c.y - 1)));
        }
        if (c.x - 1 >= 0 && c.y + 1 < this.height) {
            cells.push(this.getCell(new Point(c.x - 1, c.y + 1)));
        }
        if (c.x + 1 < this.width) {
            cells.push(this.getCell(new Point(c.x + 1, c.y)));
        }
        if (c.y - 1 >= 0 && c.x + 1 < this.width) {
            cells.push(this.getCell(new Point(c.x + 1, c.y - 1)));
        }
        if (c.x + 1 < this.width && c.y + 1 < this.height) {
            cells.push(this.getCell(new Point(c.x + 1, c.y + 1)));
        }
        if (c.y + 1 < this.height) {
            cells.push(this.getCell(new Point(c.x, c.y + 1)));
        }
        if (c.y - 1 >= 0) {
            cells.push(this.getCell(new Point(c.x, c.y - 1)));
        }
        return cells;
    };
    /**
     * Check if the cell should die off. Rule applied directly to cell.
     */
    Life.prototype.shouldCellDieRule = function (c) {
        var cells = this.getSurroundingCells(c);
        var aliveCells = cells.filter(function (cell, index, array) {
            return cell.isAlive();
        });
        if (c.isAlive() && (aliveCells.length > 3 || aliveCells.length < 2))
            c.kill();
    };
    /**
     * Check if the cell should be brought back to life. Rule applied directly to cell.
     */
    Life.prototype.shouldCellRegenerateRule = function (c) {
        var cells = this.getSurroundingCells(c);
        var aliveCells = cells.filter(function (cell, index, array) {
            return cell.isAlive();
        });
        if (!c.isAlive() && (aliveCells.length == 3)) {
            c.regen();
        }
    };
    Life.prototype.applyRules = function (c) {
        var newCell = Life.cloneCell(c);
        if (c.isAlive()) {
            this.shouldCellDieRule(newCell);
        }
        else {
            this.shouldCellRegenerateRule(newCell);
        }
        return newCell;
    };
    /**
     * Make a clone of a cell
     */
    Life.cloneCell = function (c) {
        var newCell = new Cell(c.x, c.y);
        c.isAlive() ? newCell.regen() : newCell.kill();
        return newCell;
    };
    /**
     * Calculate matrix of cells for the next step, based on applied rules
     */
    Life.prototype.calculateNewCells = function () {
        this.newCells = [];
        for (var y = 0; y < this.height; y++) {
            this.newCells.push([]);
            for (var x = 0; x < this.width; x++) {
                var c = this.getCell(new Point(x, y));
                c = this.applyRules(c);
                this.newCells[y].push(c);
            }
        }
    };
    /**
     * Step forward one generation
     */
    Life.prototype.step = function () {
        this.calculateNewCells();
        this.oldCells = this.cells;
        this.cells = this.newCells;
        this.drawAllCells();
    };
    /**
     * Being automatically stepping forward until told to stop, at the saved rate
     */
    Life.prototype.play = function () {
        this.playPauseButton.classList.remove('paused');
        this.playPauseButton.classList.add('playing');
        this.playPauseButton.querySelector('.text').innerHTML = 'Pause';
        this.step();
        this.intervalReference = setInterval(function () {
            this.step();
        }.bind(this), 1000 / this.speed);
    };
    /**
     * Stop stepping forward
     */
    Life.prototype.pause = function () {
        this.playPauseButton.classList.remove('playing');
        this.playPauseButton.classList.add('paused');
        this.playPauseButton.querySelector('.text').innerHTML = 'Play';
        clearInterval(this.intervalReference);
    };
    Life.prototype.reset = function () {
        if (this.isPlaying) {
            this.pause();
        }
        this.clear();
    };
    Life.prototype.clear = function () {
        for (var y = 0; y < this.height; y++) {
            for (var x = 0; x < this.width; x++) {
                var c = this.getCell(new Point(x, y));
                c.kill();
            }
        }
        this.drawAllCells();
    };
    Life.prototype.playPause = function () {
        this.isPlaying ? this.pause() : this.play();
        this.isPlaying = !this.isPlaying;
    };
    return Life;
}());
// @todo Write unit tests
var Point = (function () {
    function Point(x, y) {
        this.x = x;
        this.y = y;
    }
    Point.prototype.log = function () {
        console.log('(' + this.x + ', ' + this.y + ')');
    };
    return Point;
}());
var debug = true;
var C = new Canvas("#the-canvas");
var L = new Life(C);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
